{"version":3,"sources":["logo.svg","components/CodeBlock.js","components/Container.js","../README.md","App.js","reportWebVitals.js","index.js"],"names":["CodeBlock","this","props","language","value","className","style","vscDarkPlus","PureComponent","List","console","log","plugins","gfm","escapeHtml","source","renderers","code","App","src","logo","alt","href","target","rel","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAAe,G,MAAA,IAA0B,kC,4FCmC1BA,E,uKAhBH,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAKlB,OACE,wBAAQC,UAAU,YAAlB,SACE,cAAC,IAAD,CAAmBF,SAAUA,EAAUG,MAAOC,IAA9C,SACGH,U,GAjBaI,iBCsCTC,MArBf,WAGE,OAFAC,QAAQC,IAAI,QAGV,qBAAKN,UAAU,oBAAf,SAEE,cAAC,IAAD,CACEO,QAAS,CAACC,KACVC,YAAY,EACZC,OCrCO,4xDDsCPC,UAAW,CACTC,KAAMjB,QEZDkB,MAvBf,WACE,OACE,sBAAKb,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKc,IAAKC,EAAMf,UAAU,WAAWgB,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEhB,UAAU,WACViB,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BAUF,cAACC,EAAD,QCVSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.831fd923.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { PureComponent } from 'react'\r\n// import allCodeStyle from './register_all_style'\r\n\r\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n\r\n// 设置高亮样式\r\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'\r\n\r\n// 设置高亮的语言\r\n// import { jsx, javascript } from \"react-syntax-highlighter/dist/esm/languages/prism\";\r\n\r\nclass CodeBlock extends PureComponent {\r\n  // componentWillMount() {\r\n  //   // 注册要高亮的语法，\r\n  //   // 注意：如果不设置打包后供第三方使用是不起作用的\r\n  //   SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\r\n  //   SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\r\n  // }\r\n\r\n  render() {\r\n    const { language, value } = this.props\r\n    // const style = allCodeStyle[\r\n    //   Object.keys(allCodeStyle)[Math.floor(Math.random() * Object.keys(allCodeStyle).length)]\r\n    // ]\r\n\r\n    return (\r\n      <figure className='highlight'>\r\n        <SyntaxHighlighter language={language} style={vscDarkPlus}>\r\n          {value}\r\n        </SyntaxHighlighter>\r\n      </figure>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CodeBlock\r\n","\r\n// import allCodeStyle from './register_all_style'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport gfm from 'remark-gfm'\r\n\r\nimport md from '../../README.md'\r\nimport CodeBlock from './CodeBlock'\r\n\r\n// import { Light as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n// import javascript from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript'\r\n\r\n// console.log(allCodeStyle)\r\n\r\n// const CodeBlockList = () => {\r\n//   return Object.entries(allCodeStyle).map(([name, value]) => {\r\n//     return (\r\n//       <div key={name} className='wrapper'>\r\n//         <div className='title'>{name}</div>\r\n//         <SyntaxHighlighter\r\n//           style={value}\r\n//           language='jsx'\r\n//           children={apiMd}\r\n//         />\r\n//       </div>\r\n//     )\r\n//   })\r\n// }\r\n\r\nfunction List() {\r\n  console.log('List')\r\n\r\n  return (\r\n    <div className='container_wrapper'>\r\n\r\n      <ReactMarkdown\r\n        plugins={[gfm]}\r\n        escapeHtml={false}\r\n        source={md}\r\n        renderers={{\r\n          code: CodeBlock,\r\n        }}\r\n      >\r\n      </ReactMarkdown>\r\n\r\n      {/* <CodeBlockList></CodeBlockList> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List\r\n","export default \"\\r\\n# 將完成的 React 專案發佈在 Github Pages\\r\\n\\r\\n> 參考來源：[Deployment · Create React App](https://facebook.github.io/create-react-app/docs/deployment)\\r\\n\\r\\n### 1. 將 _homepage_ 新增到 _package.json_\\r\\n\\r\\n`\\\"homepage\\\": \\\"https://enter3017sky.github.io/github-pages-example\\\",`\\r\\n\\r\\n### 2. 將 gh-pages 部屬的指令添加到 _package.json_\\r\\n\\r\\n執行兩個\\r\\n\\r\\n```\\r\\n  \\\"scripts\\\": {\\r\\n+   \\\"predeploy\\\": \\\"npm run build\\\",\\r\\n+   \\\"deploy\\\": \\\"gh-pages -d build\\\",\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n```\\r\\n\\r\\n或一起做完\\r\\n\\r\\n```\\r\\n  \\\"scripts\\\": {\\r\\n+   \\\"deploy\\\": \\\"npm run build && gh-pages -d build\\\",\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n```\\r\\n\\r\\n### 3. 安裝 gh-pages\\r\\n\\r\\n用 npm 安裝 _gh-pages_ `npm install --save gh-pages`\\r\\n\\r\\n或 yarn，也可以使用這個 `yarn add gh-pages`\\r\\n\\r\\n### 4. github 開新的專案，然後 vscode 就輸入指令推上 Github\\r\\n\\r\\n```\\r\\ngit init\\r\\ngit add .\\r\\ngit commit -m \\\"first commit\\\"\\r\\ngit remote add origin <https://github.com/enter3017sky/github-pages-example.git>\\r\\ngit push -u origin master\\r\\n```\\r\\n\\r\\n### 5. 部屬，執行第二個步驟加入的指令，`npm run deploy`\\r\\n\\r\\n![image](https://raw.githubusercontent.com/enter3017sky/mentor-program-2nd-blog/master/picture/github-pages.png)\\r\\n\\r\\n但在公開的項目上可以在 `Settings -> Branches -> Default branch` 設定顯示為 **master** 或 **gh-pages**\\r\\n\";","import logo from './logo.svg'\r\nimport './App.css'\r\nimport Container from './components/Container.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <img src={logo} className='App-logo' alt='logo' />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className='App-link'\r\n          href='https://reactjs.org'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n\r\n      <Container />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}