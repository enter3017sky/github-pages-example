{"version":3,"sources":["logo.svg","components/CodeBlock.js","components/Container.js","../README.md","App.js","reportWebVitals.js","index.js"],"names":["CodeBlock","this","props","language","value","className","style","vscDarkPlus","PureComponent","List","plugins","gfm","escapeHtml","source","renderers","code","App","src","logo","alt","href","target","rel","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAAe,G,MAAA,IAA0B,kC,4FCmC1BA,E,uKAhBH,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAKlB,OACE,wBAAQC,UAAU,YAAlB,SACE,cAAC,IAAD,CAAmBF,SAAUA,EAAUG,MAAOC,IAA9C,SACGH,U,GAjBaI,iBCoCTC,MAnBf,WACE,OACE,qBAAKJ,UAAU,oBAAf,SAEE,cAAC,IAAD,CACEK,QAAS,CAACC,KACVC,YAAY,EACZC,OCnCO,sqKDoCPC,UAAW,CACTC,KAAMf,QEVDgB,MAvBf,WACE,OACE,sBAAKX,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKY,IAAKC,EAAMb,UAAU,WAAWc,IAAI,SACzC,sCACO,8CADP,0BAGA,mBACEd,UAAU,WACVe,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,4BAUF,cAACC,EAAD,QCVSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3c60a324.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { PureComponent } from 'react'\r\n// import allCodeStyle from './register_all_style'\r\n\r\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n\r\n// 设置高亮样式\r\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism'\r\n\r\n// 设置高亮的语言\r\n// import { jsx, javascript } from \"react-syntax-highlighter/dist/esm/languages/prism\";\r\n\r\nclass CodeBlock extends PureComponent {\r\n  // componentWillMount() {\r\n  //   // 注册要高亮的语法，\r\n  //   // 注意：如果不设置打包后供第三方使用是不起作用的\r\n  //   SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\r\n  //   SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\r\n  // }\r\n\r\n  render() {\r\n    const { language, value } = this.props\r\n    // const style = allCodeStyle[\r\n    //   Object.keys(allCodeStyle)[Math.floor(Math.random() * Object.keys(allCodeStyle).length)]\r\n    // ]\r\n\r\n    return (\r\n      <figure className='highlight'>\r\n        <SyntaxHighlighter language={language} style={vscDarkPlus}>\r\n          {value}\r\n        </SyntaxHighlighter>\r\n      </figure>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CodeBlock\r\n","\r\n// import allCodeStyle from './register_all_style'\r\nimport ReactMarkdown from 'react-markdown'\r\nimport gfm from 'remark-gfm'\r\n\r\nimport md from '../../README.md'\r\nimport CodeBlock from './CodeBlock'\r\n\r\n// import { Light as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n// import javascript from 'react-syntax-highlighter/dist/esm/languages/hljs/javascript'\r\n\r\n// console.log(allCodeStyle)\r\n\r\n// const CodeBlockList = () => {\r\n//   return Object.entries(allCodeStyle).map(([name, value]) => {\r\n//     return (\r\n//       <div key={name} className='wrapper'>\r\n//         <div className='title'>{name}</div>\r\n//         <SyntaxHighlighter\r\n//           style={value}\r\n//           language='jsx'\r\n//           children={apiMd}\r\n//         />\r\n//       </div>\r\n//     )\r\n//   })\r\n// }\r\n\r\nfunction List() {\r\n  return (\r\n    <div className='container_wrapper'>\r\n\r\n      <ReactMarkdown\r\n        plugins={[gfm]}\r\n        escapeHtml={false}\r\n        source={md}\r\n        renderers={{\r\n          code: CodeBlock,\r\n        }}\r\n      >\r\n      </ReactMarkdown>\r\n\r\n      {/* <CodeBlockList></CodeBlockList> */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List\r\n","export default \"\\r\\n# 將完成的 React 專案發佈在 Github Pages\\r\\n\\r\\n> 參考來源：[Deployment · Create React App](https://facebook.github.io/create-react-app/docs/deployment)\\r\\n\\r\\n---\\r\\n\\r\\n## Step 1 建立一個 React app\\r\\n\\r\\n> 如果有現有的，就將 Github 的專案 git clone <repo_url> 下來。跳過 Step. 1 的以下步驟。\\r\\n>\\r\\n> 或者開一個新的專案並在本地建立 React app。\\r\\n\\r\\n1. 任選一個方式建立 app\\r\\n\\r\\n```\\r\\nnpx create-react-app my-app\\r\\nnpm init react-app my-app\\r\\nyarn create react-app my-app\\r\\n```\\r\\n\\r\\n2. `cd my-app`\\r\\n\\r\\n3. 將本地與 Github 連結\\r\\n\\r\\n```\\r\\ngit init\\r\\ngit add .\\r\\ngit commit -m \\\"first commit\\\"\\r\\ngit remote add origin <https://github.com/enter3017sky/github-pages-example.git>\\r\\ngit push -u origin master\\r\\n```\\r\\n\\r\\n## Step 2 安裝與設定 gh-pages\\r\\n\\r\\n### 1. 將 _homepage_ 新增到 _package.json_\\r\\n\\r\\n`\\\"homepage\\\": \\\"https://enter3017sky.github.io/{repo-name}\\\",`\\r\\n\\r\\n### 2. 安裝 gh-pages\\r\\n\\r\\n用 npm 安裝 _gh-pages_ `npm install gh-pages --save-dev`\\r\\n\\r\\n或 yarn，也可以使用這個 `yarn add gh-pages`\\r\\n\\r\\n### 3. 將 gh-pages 部屬的指令添加到 _package.json_\\r\\n\\r\\n執行兩個\\r\\n\\r\\n```\\r\\n  \\\"scripts\\\": {\\r\\n+   \\\"predeploy\\\": \\\"npm run build\\\",\\r\\n+   \\\"deploy\\\": \\\"gh-pages -d build\\\",\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n```\\r\\n\\r\\n或一起做完\\r\\n\\r\\n```\\r\\n  \\\"scripts\\\": {\\r\\n+   \\\"deploy\\\": \\\"npm run build && gh-pages -d build\\\",\\r\\n    \\\"start\\\": \\\"react-scripts start\\\",\\r\\n    \\\"build\\\": \\\"react-scripts build\\\",\\r\\n```\\r\\n\\r\\n### 4. 部屬\\r\\n\\r\\n執行第二個步驟加入的指令，`npm run deploy`，待指令執行完成後。\\r\\n\\r\\n查看 Github，就會多一個 gh-pages 的分之，以及 _setting_ 中有 Github Pages 的專案網址等。\\r\\n\\r\\n![image](https://raw.githubusercontent.com/enter3017sky/mentor-program-2nd-blog/master/picture/github-pages.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 使用 react-markdown\\r\\n\\r\\n> 參考 [react-markdown 使用总结](https://segmentfault.com/a/1190000020294373)\\r\\n\\r\\n1. 安裝，`npm install --save react-markdown`\\r\\n\\r\\n2. 安裝 md 的 loader，`npm install -D raw-loader`\\r\\n\\r\\n3. 在 webpack 中加入 md loader 的設定。\\r\\n\\r\\n> 要更改 webpack 的設定，看來除了使用 [craco](https://github.com/gsoft-inc/craco) 覆蓋設定之外，只有使用 `npm run eject` 了。\\r\\n>\\r\\n> 這邊使使用 `npm run eject`\\r\\n\\r\\n4. config/webpack.config.js 中加入 loader\\r\\n\\r\\n```javascript\\r\\n// ...(略)\\r\\n    module: {\\r\\n      strictExportPresence: true,\\r\\n      rules: [\\r\\n        // Disable require.ensure as it's not a standard language feature.\\r\\n        { parser: { requireEnsure: false }},\\r\\n        {\\r\\n          // \\\"oneOf\\\" will traverse all following loaders until one will\\r\\n          // match the requirements. When no loader matches it will fall\\r\\n          // back to the \\\"file\\\" loader at the end of the loader list.\\r\\n          oneOf: [\\r\\n            // ...(略)\\r\\n\\r\\n            // 在最後的 loader 之前，加入 md 的設定，剩下的檔案都會被 file-loader 處理掉。\\r\\n            // https://zhuanlan.zhihu.com/p/85839264\\r\\n            {\\r\\n              test: /\\\\.md$/,\\r\\n              // loader: require.resolve('raw-loader'),\\r\\n              use: 'raw-loader',\\r\\n            },\\r\\n\\r\\n\\r\\n            // \\\"file\\\" loader makes sure those assets get served by WebpackDevServer.\\r\\n            // When you `import` an asset, you get its (virtual) filename.\\r\\n            // In production, they would get copied to the `build` folder.\\r\\n            // This loader doesn't use a \\\"test\\\" so it will catch all modules\\r\\n            // that fall through the other loaders.\\r\\n            {\\r\\n              loader: require.resolve('file-loader'),\\r\\n              // Exclude `js` files to keep \\\"css\\\" loader working as it injects\\r\\n              // its runtime that would otherwise be processed through \\\"file\\\" loader.\\r\\n              // Also exclude `html` and `json` extensions so they get processed\\r\\n              // by webpacks internal loaders.\\r\\n              exclude: [/\\\\.(js|mjs|jsx|ts|tsx)$/, /\\\\.html$/, /\\\\.json$/],\\r\\n              options: {\\r\\n                name: 'static/media/[name].[hash:8].[ext]',\\r\\n              },\\r\\n            },\\r\\n            // ** STOP ** Are you adding a new loader?\\r\\n            // Make sure to add the new loader(s) before the \\\"file\\\" loader.\\r\\n          ],\\r\\n        },\\r\\n      ],\\r\\n    },\\r\\n```\\r\\n\";","import logo from './logo.svg'\r\nimport './App.css'\r\nimport Container from './components/Container.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <img src={logo} className='App-logo' alt='logo' />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className='App-link'\r\n          href='https://reactjs.org'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n\r\n      <Container />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}